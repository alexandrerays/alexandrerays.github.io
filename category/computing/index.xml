<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>computing | Alexandre Ray</title><link>https://alexandrerays.github.io/category/computing/</link><atom:link href="https://alexandrerays.github.io/category/computing/index.xml" rel="self" type="application/rss+xml"/><description>computing</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sun, 23 May 2021 00:00:00 +0000</lastBuildDate><image><url>https://alexandrerays.github.io/media/icon_hu82c6599c132dd59e4c5438f5b06fe553_25162_512x512_fill_lanczos_center_3.png</url><title>computing</title><link>https://alexandrerays.github.io/category/computing/</link></image><item><title>High Performance Computing at Stanford</title><link>https://alexandrerays.github.io/post/high-performance-computing-at-stanford/</link><pubDate>Sun, 23 May 2021 00:00:00 +0000</pubDate><guid>https://alexandrerays.github.io/post/high-performance-computing-at-stanford/</guid><description>&lt;details class="toc-inpage d-print-none " open>
&lt;summary class="font-weight-bold">Table of Contents&lt;/summary>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#step-1-setting-up-sherlock">Step 1: Setting up Sherlock&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#create-an-account">Create an account&lt;/a>&lt;/li>
&lt;li>&lt;a href="#set-up-ssh-connection">Set up SSH connection&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#step-2-setting-up-clusterjob">Step 2: Setting up ClusterJob&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#create-an-account-1">Create an account&lt;/a>&lt;/li>
&lt;li>&lt;a href="#install-clusterjob">Install ClusterJob&lt;/a>&lt;/li>
&lt;li>&lt;a href="#set-up-ssh-configuration">Set up SSH configuration&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#step-3-submit-your-first-job-">Step 3: Submit your first job ⚒︎&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#run-your-first-serial-computation">Run your first serial computation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#run-your-first-parallel-computation">Run your first parallel computation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#acknowledgements">Acknowledgements&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/details>
&lt;p>In this tutorial, I&amp;rsquo;ll walk through the process of running a large computational experiment using two tools: &lt;a href="https://clusterjob.org" target="_blank" rel="noopener">ClusterJob&lt;/a> and &lt;a href="http://sherlock.stanford.edu" target="_blank" rel="noopener">Sherlock&lt;/a>. ClusterJob is an automation system for high-throughput reproducible computations, created by &lt;a href="https://datascience.stanford.edu/people/hatef-monajemi" target="_blank" rel="noopener">Hatef Monajemi&lt;/a> and &lt;a href="https://statistics.stanford.edu/people/david-donoho" target="_blank" rel="noopener">David L. Donoho&lt;/a>. Sherlock is Stanford&amp;rsquo;s High Performance Computing (HPC) cluster.&lt;/p>
&lt;p>You can also find &lt;a href="https://stats285shilaan.netlify.app/post/high-performance-computing-with-clusterjob-and-sherlock/" target="_blank" rel="noopener">an exact replica of this tutorial&lt;/a> on a &lt;a href="https://stats285shilaan.netlify.app" target="_blank" rel="noopener">separate website I created&lt;/a> for &lt;em>Statistics 285: Massive Computational Experiments, Painlessly&lt;/em>, a course taught at Stanford University in Spring 2021. Note that Sherlock is, unfortunately, only accessible to the Stanford community.&lt;/p>
&lt;p>My goal is to provide a relatively painless introduction to High Performance Computing at Stanford.&lt;/p>
&lt;h2 id="step-1-setting-up-sherlock">Step 1: Setting up Sherlock&lt;/h2>
&lt;h3 id="create-an-account">Create an account&lt;/h3>
&lt;ul class="cta-group">
&lt;li>
&lt;a href="https://www.sherlock.stanford.edu" target="_blank" rel="noopener" class="btn btn-primary px-3 py-3">Request a Sherlock account&lt;/a>
&lt;/li>
&lt;/ul>
&lt;p>If you don&amp;rsquo;t already have a Sherlock account, now&amp;rsquo;s the time to request one. After creating an account, you&amp;rsquo;ll want to set up your access credentials using SSH keys, which allows for remote communication between your local machine and the cluster.&lt;/p>
&lt;h3 id="set-up-ssh-connection">Set up SSH connection&lt;/h3>
&lt;p>To set up your connection, check if you already have SSH keys on your machine. You can do this in two ways:&lt;br>
☞︎ Go to your home directory and navigate to the hidden&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> &lt;code>.ssh&lt;/code> folder&lt;br>
☞︎ Go to your terminal and enter &lt;code>ls -al ~/.ssh&lt;/code>&lt;/p>
&lt;p>If you see a &lt;code>.pub&lt;/code> file, you already have SSH keys set up. If you don&amp;rsquo;t, run the following in your terminal:&lt;/p>
&lt;pre>&lt;code>ssh-keygen -t rsa -C &amp;quot;your_email@example.com&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>Now, all you need to do is copy your keys over to the remote cluster.&lt;/p>
&lt;pre>&lt;code>ssh-copy-id your-username@sherlock.stanford.edu #run this in your terminal
&lt;/code>&lt;/pre>
&lt;p>Next, add the following to your &lt;code>~.ssh/config&lt;/code> file to avoid Two-Factor Authentication every time you access the cluster, either from your local machine or through ClusterJob.&lt;/p>
&lt;pre>&lt;code>Host sherlock sherlock?? sherlock.stanford.edu sherlock??.stanford.edu
ControlMaster auto
ControlPath ~/.ssh/%r@%h:%p
ControlPersist yes #this enables direct access to sherlock using your terminal
Host login.sherlock.stanford.edu
ControlMaster auto
ControlPath ~/.ssh/%l%r@%h:%p
ControlPersist yes #this enables access to sherlock using ClusterJob
&lt;/code>&lt;/pre>
&lt;details class="spoiler " id="spoiler-2">
&lt;summary>Show me how to edit my &lt;code>~.ssh/config&lt;/code> file&lt;/summary>
&lt;p>&lt;p>Editing your &lt;code>~.ssh/config&lt;/code> file can be done in two ways:&lt;br>
☞︎ Directly, by navigating to &lt;code>.ssh &amp;gt; config&lt;/code> from your home directory&lt;br>
☞︎ Through your terminal, by running:&lt;/p>
&lt;pre>&lt;code>cd ~/.ssh #change directory to the .ssh folder
open config
&lt;/code>&lt;/pre>
&lt;/p>
&lt;/details>
&lt;p>You can now check whether your connection works by trying to connect directly to the server. In your terminal, run:&lt;/p>
&lt;pre>&lt;code>ssh your-username@sherlock.stanford.edu
&lt;/code>&lt;/pre>
&lt;p>The first time you do this, you&amp;rsquo;ll likely get a warning like this:&lt;/p>
&lt;pre>&lt;code>The authenticity of host 'login.sherlock.stanford.edu' can't be established.
ECDSA key fingerprint is SHA256:eB0bODKdaCWtPgv0pYozsdC5ckfcBFVOxeMwrNKdkmg.
Are you sure you want to continue connecting (yes/no)?
&lt;/code>&lt;/pre>
&lt;p>Simply type &amp;lsquo;yes&amp;rsquo; and proceed. After completing these steps, your Sherlock account should be ready to go! 🎉&lt;/p>
&lt;h2 id="step-2-setting-up-clusterjob">Step 2: Setting up ClusterJob&lt;/h2>
&lt;h3 id="create-an-account-1">Create an account&lt;/h3>
&lt;ul class="cta-group">
&lt;li>
&lt;a href="https://clusterjob.org/register.php" target="_blank" rel="noopener" class="btn btn-primary px-3 py-3">Create a ClusterJob account&lt;/a>
&lt;/li>
&lt;/ul>
&lt;p>Set up an account with ClusterJob using your &lt;code>@edu&lt;/code> email account. Take note of your chosen ClusterJob ID and the ClusterJob Key assigned to your account.&lt;/p>
&lt;h3 id="install-clusterjob">Install ClusterJob&lt;/h3>
&lt;p>In your terminal, run:&lt;/p>
&lt;pre>&lt;code>git clone https://github.com/monajemi/clusterjob.git ~/CJ_install #clones CJ from GitHub
sudo cpan -i Data::Dumper Data::UUID FindBin File::chdir File::Basename File::Spec IO::Socket::INET IO::Socket::SSL Getopt::Declare Term::ReadLine JSON::PP JSON::XS Digest::SHA Time::Local Time::Piece Moo HTTP::Thin HTTP::Request::Common JSON URI #installs perl dependencies
alias cj='perl ~/CJ_install/src/CJ.pl'; #builds an alias for CJ
&lt;/code>&lt;/pre>
&lt;h3 id="set-up-ssh-configuration">Set up SSH configuration&lt;/h3>
&lt;p>You just installed a &lt;code>CJ_install&lt;/code> folder to your home directory. In it, you will find two important files that you&amp;rsquo;ll need to edit: &lt;code>cj_config&lt;/code> and &lt;code>ssh_config&lt;/code>.&lt;/p>
&lt;p>In &lt;code>cj_config&lt;/code>, you&amp;rsquo;ll provide your ClusterJob ID (the username you chose) and the ClusterJob Key you received when creating your account.&lt;/p>
&lt;p>Copy the following into the &lt;code>cj_config&lt;/code> file:&lt;/p>
&lt;pre>&lt;code>CJID your-id #edit this
CJKEY
eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhZG1pbiI6MCwiZCI6eyJ1aWQiOiJzaGlsYWFuIiwiY2pwYXNzY29kZSI6IjJmYWQ2OWU1YjZlNDQxNDE2NjhhOTIxZThiMmNlNTYwIn19.P60piuQFOmzny9dFmwWoWDGeNrtsi6UHl_16OIdoICa-C6Y8KeGadT6pcMJvyKLlBs163rR_p1CXkm33l6L8fhH9tsJGG3UN4cMocWsVeWH_ORfZsdNvuWa24IO2Yh7MPMTj067e9UodDcOYe7N2swu9eWfvC82YBk7Ubna3ZDnHi4icK06exK1_mIj8jv0fDzHS4m0eWd5u0Sg1YecMp9YXU3DEc_l3Hxroyc_qnfVmK9WhiDTfAx6ZYoHxFF2VecWVsOB6-Pq6cjYKKw7BQIiLbQ0VLIZmwjX3QiQRTvi6vX4vsfwxHTvsNKGE_L2ru9NAfcuRigX1mgOCLBwU9g #edit this
SYNC_TYPE manual
SYNC_INTERVAL 300
&lt;/code>&lt;/pre>
&lt;div class="alert alert-warning">
&lt;div>
The &lt;code>cj_config&lt;/code> file is somehow very sensitive to spacing and line breaks. Make sure you add linebreaks, like in the example above, or you&amp;rsquo;ll get obscure error messages when running ClusterJob.
&lt;/div>
&lt;/div>
&lt;p>In &lt;code>ssh_config&lt;/code>, you&amp;rsquo;ll provide information about the Sherlock cluster. Copy the following into the &lt;code>ssh_config&lt;/code> file:&lt;/p>
&lt;pre>&lt;code>[sherlock2]
Host login.sherlock.stanford.edu
User your-username #edit this to your own username
Bqs SLURM
Repo /scratch/users/your-username/CJRepo_Remote #edit this
Python python/3.8.8
Pythonlib IPython:pandas:numpy:libgcc:scipy:matplotlib:cvxpy:-c conda-forge
Alloc --time 48:00:00 --mem 32G
R R/3.4.0
Rlib ggplot2
[sherlock2]
&lt;/code>&lt;/pre>
&lt;details class="spoiler " id="spoiler-5">
&lt;summary>Show me how to edit my &lt;code>cj_config&lt;/code> and &lt;code>ssh_config&lt;/code> files&lt;/summary>
&lt;p>&lt;p>Again, you can edit these two files through your terminal or manually:&lt;br>
☞︎ Directly navigate to &lt;code>CJ_install &amp;gt; cj_config/ssh_config&lt;/code> from your home directory&lt;br>
☞︎ Through your terminal, run:&lt;/p>
&lt;pre>&lt;code>cd ~/CJ_install
open cj_config
open ssh_config
&lt;/code>&lt;/pre>
&lt;/p>
&lt;/details>
&lt;p>We&amp;rsquo;re ready to check if everything is working correctly. In your terminal, run:&lt;/p>
&lt;pre>&lt;code>cj init #initialize your CJ agent
cj who #check if the agent is installed
cj update #update to newest version
&lt;/code>&lt;/pre>
&lt;h2 id="step-3-submit-your-first-job-">Step 3: Submit your first job ⚒︎&lt;/h2>
&lt;p>Here&amp;rsquo;s where the real benefit of ClusterJob comes in. To run a job on Sherlock, you normally have to write a job submission script describing your resource request and submission options. ClusterJob automates this process and does it for you! No need to learn anything about Sherlock&amp;rsquo;s job scheduler, &lt;a href="https://slurm.schedmd.com" target="_blank" rel="noopener">Slurm&lt;/a>.&lt;/p>
&lt;h3 id="run-your-first-serial-computation">Run your first serial computation&lt;/h3>
&lt;p>The &lt;code>CJ_install&lt;/code> folders comes with some example scripts to run, so let&amp;rsquo;s give those a try.&lt;/p>
&lt;details class="spoiler " id="spoiler-6">
&lt;summary>Show me the script I&amp;rsquo;m about to run&lt;/summary>
&lt;p>&lt;pre>&lt;code># This is a test Python script for CJ
# Author: Hatef Monajemi June 11 2017
import numpy as np;
import csv;
SUID = 'monajemi'
file = SUID+'_results.csv';
Var0 = np.array([1,2,3]);
Var1 = [1,2];
with open('file.txt','w') as myfile:
for i in range(len(Var0)):
for j in range(len(Var1)): # This is a comment
# write to a text file for testing reduce
with open(file,'a') as csvfile:
resultswriter = csv.writer(csvfile,delimiter=',');
resultswriter.writerow([i,j,Var0[i]+Var1[j] ]);
&lt;/code>&lt;/pre>
&lt;/p>
&lt;/details>
&lt;p>In your terminal, run:&lt;/p>
&lt;pre>&lt;code>cd ~/CJ_install/example/Python/ #change directory to the folder with Python example
cj run simpleExample.py sherlock2 -m “A message.” #run your first serial job!
&lt;/code>&lt;/pre>
&lt;p>When you run the second command, starting with &lt;code>cj run&lt;/code>, you&amp;rsquo;ll get a message like this:&lt;/p>
&lt;pre>&lt;code>CJmessage::initiating package 0df1b4e7
&lt;/code>&lt;/pre>
&lt;p>In this case, &lt;code>0df1b4e7&lt;/code> is your job ID (referred to by ClusterJob as &lt;code>pid&lt;/code>, for process identifier); take note of it.&lt;/p>
&lt;details class="spoiler " id="spoiler-7">
&lt;summary>Show me what my CJ messages should look like&lt;/summary>
&lt;p>&lt;pre>&lt;code>CJmessage::initiating package 0df1b4e7
CJmessage::runing [simpleExample.py] on [sherlock2] with:
alloc: --time 48:00:00 --mem 32G
CJmessage::sending from: /Users/shilaan/CJ_install/example/Python
CJmessage::Creating/checking conda venv. This may take a while the first time...
CJmessage::Creating reproducible script(s) reproduce_simpleExample.py
CJmessage::compressing files to propagate...
CJmessage::sending 1.92 KB to: sherlock2:/scratch/users/shilaan/CJRepo_Remote/simpleExample
CJmessage::extracting package...
CJmessage::Submitting job...
CJmessage::1 job(s) submitted (24992894)
&lt;/code>&lt;/pre>
&lt;/p>
&lt;/details>
&lt;p>After you&amp;rsquo;ve successfully submitted your job, you can check its status by running:&lt;/p>
&lt;pre>&lt;code>cj state
&lt;/code>&lt;/pre>
&lt;p>When your job is done, you&amp;rsquo;ll see a message like this:&lt;/p>
&lt;pre>&lt;code>pid 0df1b4e7aed70b1a367212f861729d0bc8fcfc29
remote_account: shilaan@login.sherlock.stanford.edu
job_id: 24992894
state: COMPLETED
&lt;/code>&lt;/pre>
&lt;p>Now, another one of ClusterJob&amp;rsquo;s benefits: it&amp;rsquo;s really easy to get the results of your job back onto your local computer. Run:&lt;/p>
&lt;pre>&lt;code>cj get 0df1b4e7 #replace with your own job id
&lt;/code>&lt;/pre>
&lt;p>Now, you&amp;rsquo;ll get the following message:&lt;/p>
&lt;pre>&lt;code>CJmessage::Getting results from 'sherlock2'
CJmessage::Please see your last results in /Users/shilaan/CJ_get_tmp/0df1b4e7aed70b1a367212f861729d0bc8fcfc29
&lt;/code>&lt;/pre>
&lt;p>Your results are ready for viewing! 🥳 The mentioned folder will include your results, your original script, and a script that fully reproduces the results.&lt;/p>
&lt;h3 id="run-your-first-parallel-computation">Run your first parallel computation&lt;/h3>
&lt;p>We can rerun the same job we just submitted, but this time do it in parallel. The script we ran included a for loop over 6 elements (or index combinations). Instead of running this script serially, we can run it in parallel: we can submit a separate job for each index combination. In other words, we&amp;rsquo;ll submit 6 separate jobs to Sherlock. Again, ClusterJob will fully automate this process for you.&lt;/p>
&lt;p>In your terminal, simply run:&lt;/p>
&lt;pre>&lt;code>cd ~/CJ_install/example/Python/ #change directory to the folder with Python example
cj parrun simpleExample.py sherlock2 -m “A message.” #run your first parallel job!
&lt;/code>&lt;/pre>
&lt;p>Now, you should receive the following message:&lt;/p>
&lt;pre>&lt;code>CJmessage::6/6 job(s) submitted
&lt;/code>&lt;/pre>
&lt;details class="spoiler " id="spoiler-8">
&lt;summary>Show me what my CJ messages should look like&lt;/summary>
&lt;p>&lt;pre>&lt;code>CJmessage::initiating package 30236535
CJmessage::parruning [simpleExample.py] on [sherlock2] with:
alloc: --time 48:00:00 --mem 32G
CJmessage::sending from: /Users/shilaan/CJ_install/example/Python
CJmessage::Creating/checking conda venv. This may take a while the first time...
CJmessage::Invoking Python to find range of indices. Please be patient...
Checking command 'python' is available...
python available.
finding range of indices...
Closing Python session!
CJmessage::no SLURM partition specified. CJ is using default partition: long,normal
CJmessage::Creating reproducible script(s) reproduce_simpleExample.py
CJmessage::compressing files to propagate...
CJmessage::sending 2.96 KB to: sherlock2:/scratch/users/shilaan/CJRepo_Remote/simpleExample
CJmessage::extracting package...
CJmessage::Submitting job(s)
CJmessage::6/6 job(s) submitted (24994033-24994039)
&lt;/code>&lt;/pre>
&lt;/p>
&lt;/details>
&lt;p>To get the results, we have to first reduce the results of our parallel run into a single file. To do this, we have to identify the file that contains our results &amp;ndash; in this case, &lt;code>monajemi_results.csv&lt;/code> &amp;ndash; and include our job ID.
In your terminal, run:&lt;/p>
&lt;pre>&lt;code>cj reduce monajemi_results.csv 30236535 #change to your own job ID
&lt;/code>&lt;/pre>
&lt;p>You&amp;rsquo;ll be asked if you want to submit the reduce script to the queue via srun. This is recommended for big jobs, but in this case you can simple answer &lt;code>n&lt;/code>. Afterwards, you&amp;rsquo;ll get the following message:&lt;/p>
&lt;pre>&lt;code>CJmessage::Reducing results done! Use &amp;quot;CJ get 30236535 &amp;quot; to get your results.
&lt;/code>&lt;/pre>
&lt;p>&lt;details class="spoiler " id="spoiler-9">
&lt;summary>Show me what my CJ messages should look like&lt;/summary>
&lt;p>&lt;pre>&lt;code>CJmessage::30236535
CJmessage::Checking progress of runs...
CJmessage::Reducing monajemi_results.csv
CJmessage::Do you want to submit the reduce script to the queue via srun? (recommneded for big jobs) Y/N?
n
system:ssh shilaan@login.sherlock.stanford.edu 'cd /scratch/users/shilaan/CJRepo_Remote/simpleExample/3023653586353cab1f4601074519eec3c34f9346; bash -l cj_collect.sh'
SubPackage 1 Collected (16.67%)
SubPackage 2 Collected (33.33%)
SubPackage 3 Collected (50.00%)
SubPackage 4 Collected (66.67%)
SubPackage 5 Collected (83.33%)
SubPackage 6 Collected (100.00%)
CJmessage::Reducing results done! Use &amp;quot;CJ get 30236535 &amp;quot; to get your results.
&lt;/code>&lt;/pre>
&lt;/p>
&lt;/details>
Note that the terminal is case-sensitive so we actually have to remove the capitalization from the suggestion and run &lt;code>cj get 30236535&lt;/code>. Afterwards, you should get a message like this:&lt;/p>
&lt;pre>&lt;code>CJmessage::Please see your last results in /Users/shilaan/CJ_get_tmp/3023653586353cab1f4601074519eec3c34f9346
&lt;/code>&lt;/pre>
&lt;p>Navigate to the folder to see the results of your parallel computation!&lt;/p>
&lt;p>&lt;img src="parallel.jpg" alt="">&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements&lt;/h2>
&lt;p>❤︎ Statistics 285 Teaching Team&lt;br>
❤︎ Mahsa Lotfi and Andrew Donoho, who went above and beyond in helping me get set up&lt;br>
❤︎ The &lt;a href="https://stats285.github.io/elasticlusterjob-tutorial.html" target="_blank" rel="noopener">ElastiCluster and Clusterjob Tutorial&lt;/a>, written by Mahsa Lotfi&lt;br>
❤︎ The &lt;a href="https://clusterjob.org/documentation/" target="_blank" rel="noopener">ClusterJob documentation&lt;/a>&lt;br>
❤︎ The &lt;a href="https://www.sherlock.stanford.edu/docs/overview/introduction/" target="_blank" rel="noopener">Sherlock documentation&lt;/a>&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>On Mac, you can view your hidden folders using &lt;code>Command + Shift + .&lt;/code>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>